#!groovy
 
pipeline {
  agent {
    label 'host'
  }
  
  options {
    buildDiscarder(logRotator(numToKeepStr: '10', daysToKeepStr: '7'))
    disableConcurrentBuilds()
  }
  
  stages {
 
    stage("Set Build Parameters") {
      steps {
        script {
          currentBuild.displayName = "Build_App .${BUILD_NUMBER}";
        }
      }
    }

    stage("Unit Test") {
      steps {
        dir("./app") {
          script {
            sh "./gradlew test"
          }
        }
      }
    }

    stage("Code Quality") {
      steps {
        dir("./app") {
          withSonarQubeEnv('Sonarqube') {
            withCredentials([usernamePassword(credentialsId: 'lidop', passwordVariable: 'rootPassword', usernameVariable: 'rootUser')]) {
              sh 'docker run --dns ${IPADDRESS} --rm  -v ${PWD}/:/work -e SERVER=http://sonarqube.service.lidop.local:8084/sonarqube -e PROJECT_KEY=lab-backend  registry.service.lidop.local:5000/lidop/sonarscanner:latest'
            }
          }
          timeout(time: 1, unit: 'HOURS') {
            waitForQualityGate abortPipeline: true
          }
        }
      }
    }

    stage("Build") {
      steps {
        dir("./app") {
          script {
            sh "./gradlew build"
          }
        }
      }
    }

    stage("Build Image") {
      steps {
        dir("./app") {
          script {
            sh "docker build -t lab-backend ."
          }
        }
      }
    }
 
    stage("Deploy App") {
      steps {
        script {
          try {
            sh "docker rm -f lab-backend"
          }
          catch(err) {
            echo "no running instance."
          }
          finally {
            sh "docker run -d -p 9110:8080 --name lab-backend lab-backend"
          }
        }
      }
    }
  }
 
  post { 
    always { 
      script {
        currentBuild.description = "goto <a href=https://www.${PUBLIC_IPADDRESS}.xip.io/port/9110/>App</a>"
      }
    }
  }
}